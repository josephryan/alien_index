#!perl

use strict;
use warnings; 
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

# algorithm is based on algorithm described in the following:
#  Gladyshev, Eugene A., Matthew Meselson, and Irina R. Arkhipova.
#  "Massive horizontal gene transfer in bdelloid rotifers."
#  science 320.5880 (2008): 1210-1213.

our $VERSION = 2.1;
our $AUTHOR  = 'Joseph F. Ryan <joseph.ryan@whitney.ufl.edu>';

MAIN: {
    my $rh_opts  = process_options();
    my $rh_blast = get_blast($rh_opts->{'blast'},$rh_opts->{'alien_pattern'});
    my $rh_ai    = get_alien_indices($rh_blast,$rh_opts->{'alien_pattern'});
    print_sorted_ai($rh_opts,$rh_ai);
}

sub print_sorted_ai {
    my $rh_o  = shift;
    my $rh_ai = shift;
    print "ID\tAI\tbest E-Val\tbest non-alien E-val\tAqseqid\tAsseqid\tApident\tAlength\tAmismatch\tAgapopen\tAqstart\tAqend\tAsstart\tAsend\tAevalue\tAbitscore\tNAqseqid\tNAsseqid\tNApident\tNAlength\tNAmismatch\tNAgapopen\tNAqstart\tNAqend\tNAsstart\tNAsend\tNAevalue\tNAbitscore\n";
    foreach my $id (sort {$rh_ai->{$b}->{'ai'} <=> $rh_ai->{$a}->{'ai'}} 
                    keys %{$rh_ai}) {
        if ($rh_o->{'long_output'}) {    
            print "$id\t$rh_ai->{$id}->{'ai'}\t$rh_ai->{$id}->{'alien_eval'}\t";
            print "$rh_ai->{$id}->{'non_alien_eval'}\t$rh_ai->{$id}->{'alien_blast'}\t$rh_ai->{$id}->{'non_alien_blast'}\n";
        } else {
            print "$id\t$rh_ai->{$id}->{'ai'}\t$rh_ai->{$id}->{'alien_eval'}\n";
        }
    }
}

# formula from Gladyshev et al. 2008.
sub calc_ai {
    my $nm_val = shift;
    my $m_val = shift;
    my $ai = log(($m_val) + 1e-200) - log(($nm_val) + 1e-200);
    return $ai;
}

sub get_alien_indices {
    my $rh_bl = shift;
    my $alien_pattern = shift;
    my %ai_indices = ();
    foreach my $id (keys %{$rh_bl}) {
        my $ra_f1 = shift @{$rh_bl->{$id}};
        my $alien_blast = join "\t", @{$ra_f1};
        my $non_alien_blast = "-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-";
        HIT: foreach my $ra_fields (@{$rh_bl->{$id}}) {
            next if ($ra_fields->[1] =~ m/$alien_pattern/);
            my $ai = calc_ai($ra_f1->[10],$ra_fields->[10]);
            $non_alien_blast = join "\t", @{$ra_fields};
            $ai_indices{$id} = {'alien_eval' => $ra_f1->[10],
                                'alien_blast' => $alien_blast,
                                'non_alien_blast' => $non_alien_blast,
                                'non_alien_eval' => $ra_fields->[10],
                                'ai' => $ai};
            last HIT;
        }
        unless ($ai_indices{$id}) {
            my $ai = calc_ai($ra_f1->[10],1);
            $ai_indices{$id} = {'alien_eval' => $ra_f1->[10],
                                'alien_blast' => $alien_blast,
                                'non_alien_blast' => $non_alien_blast,
                                'non_alien_eval' => 'no hits',
                                'ai' => $ai};
        }
    }
    return \%ai_indices;
}

sub get_blast {
    my $blast = shift;
    my $alien_pattern = shift;
    my %data  = ();
    my %not_contam  = ();
    open IN, $blast or die "cannot open $blast:$!";
    while (my $line = <IN>) {
        chomp $line;
        my @fields = split /\t/, $line;
        next if ($not_contam{$fields[0]});
        if (!$data{$fields[0]} && ($fields[1] !~ m/$alien_pattern/) ) {
            $not_contam{$fields[0]}++;
            next;
        }
        push @{$data{$fields[0]}}, \@fields;
    }
    return \%data;
}

sub usage {
    die "usage: $0 --blast=BLASTREPORT --alien_pattern=PATTERN_IN_ALIEN_DEFLINES [--long_output] [--version] [--help]\n";
}

sub process_options {
    my $rh_opts = {};
    $rh_opts->{'blast'} = '';
    my $opt_results = Getopt::Long::GetOptions(
                              'version' => \$rh_opts->{'version'},
                      'alien_pattern=s' => \$rh_opts->{'alien_pattern'},
                              'blast=s' => \$rh_opts->{'blast'},
                          'long_output' => \$rh_opts->{'long_output'},
                                 'help' => \$rh_opts->{'help'});
    die "$VERSION\n" if ($rh_opts->{'version'});
    pod2usage({-exitval => 0, -verbose => 2}) if $rh_opts->{'help'};
    usage() unless ($rh_opts->{'blast'});
    return $rh_opts;
}

__END__

=head1 NAME

B<alien_index> - identify non-animal sequence in animal transcriptomes

=head1 AUTHOR

Joseph F. Ryan <joseph.ryan@whitney.ufl.edu>

=head1 SYNOPSIS

alien_index --blast=BLASTREPORT --alien_pattern=PATTERN_IN_ALIEN_DEFLINES [--long_output] [--version] [--help]

=head1 OPTIONS

=over

=item B<--blast>

BLAST report run with -outfmt 6 

=item B<--alien_pattern>

a pattern that appears in 

=item B<--long_output>

output will contain all blast info from the best alien BLAST high scoring pair (blast tab output begins with A e.g. "Aevalue") and best non-alien BLAST high scoring pair (blast tab output begins with NA e.g. "NAqstart")
 1.	 qseqid 	 query (e.g., unknown gene) sequence id
 2. 	 sseqid 	 subject (e.g., reference genome) sequence id
 3. 	 pident 	 percentage of identical matches
 4. 	 length 	 alignment length (sequence overlap)
 5. 	 mismatch 	 number of mismatches
 6. 	 gapopen 	 number of gap openings
 7. 	 qstart 	 start of alignment in query
 8. 	 qend 	 end of alignment in query
 9. 	 sstart 	 start of alignment in subject
 10. 	 send 	 end of alignment in subject
 11. 	 evalue 	 expect value
 12. 	 bitscore 	 bit score

=item B<--help>

Print this manual

=item B<--version>

Print the version. Overrides all other options.

=back

=head1 DESCRIPTION

Generates a measure (alien index) which measures by how many orders of magnitude the BLAST E-value for the best non-alien hit differs from that for the best alien hit.  Examples of non-alien and alien are: (metazoan and non-metazoan; plant and non-plant; non-nematodes and nematodes--if for example you expected nematode contamination).

=head1 STEP-BY-STEP

1. Create a FASTA database of non-alien sequences (e.g., representative animal protein sequences) (NOTE: nucleotide sequences would work too)
    * an example database (meta.fa.gz) is available here: http://ryanlab.whitney.ufl.edu/downloads/alien_index/

2. Create a FASTA database of alien sequences (e.g., representative non-animal protein sequences; e.g., bacteria, non-metazoan euks, archae)
    * an example database (non_meta.fa.gz) is available here: http://ryanlab.whitney.ufl.edu/downloads/alien_index/

3. Add unique code to definition line of all alien sequences. For
       example:

    perl -pi -e 's/^>/>ALIEN_/' non_meta.fa

4. Make sure that your unique code is not found in your non-alien fasta

    grep '^>' meta.fa | grep ALIEN_

5. create BLAST database. For example:

    cat non_meta.fa meta.fa > ai.fa
    
    makeblastdb -dbtype prot -in ai.fa

6. BLAST query sequences (e.g., transcriptome) against combined db. Be sure to use -outfmt 6 (tabbed). For example:

    blastx -query myseqs.fa -db ai.fa -outfmt 6 -max_target_seqs 1000 -seg yes -evalue 0.001 -out myseqs_v_ai.blastx

7. Run alien_index

    alien_index --blast=myseqs_v_ai.blastx --alien_pattern=ALIEN_ > myseqs.alien_index

=head1 COPYRIGHT

Copyright (C) 2016, Joseph F. Ryan

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
